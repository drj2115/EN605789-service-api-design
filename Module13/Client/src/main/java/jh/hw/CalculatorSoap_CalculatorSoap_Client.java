package jh.hw;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.namespace.QName;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.5.2
 * 2022-05-02T10:12:54.080-04:00
 * Generated source version: 3.5.2
 */
public final class CalculatorSoap_CalculatorSoap_Client {
    private static final Logger LOGGER = LoggerFactory.getLogger(CalculatorSoap_CalculatorSoap_Client.class);
    private static final QName SERVICE_NAME = new QName("http://hw.jh/", "Calculator");

    private CalculatorSoap_CalculatorSoap_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = Calculator.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                LOGGER.error(e.getMessage(), e);
            }
        }

        Calculator ss = new Calculator(wsdlURL, SERVICE_NAME);
        CalculatorSoap port = ss.getCalculatorSoap();
        int intA = 100;
        int intB = 10;
        int expectedResult = intA + intB;
        int returnedResult = port.add(intA, intB);
        LOGGER.info("\nTest ADD - {} + {}\n\texpected: {}\n\treturned: {}\n\t{}", intA, intB, expectedResult, returnedResult, expectedResult == returnedResult ? "SUCCESS" : "FAIL");

        {
            LOGGER.info("Invoking add...");
            int _add_intA = 10;
            int _add_intB = 10;
            int _add__return = port.add(_add_intA, _add_intB);
            LOGGER.info("add.result=" + _add__return);
        }
        {
            LOGGER.info("Invoking subtract...");
            int _subtract_intA = 20;
            int _subtract_intB = 20;
            int _subtract__return = port.subtract(_subtract_intA, _subtract_intB);
            LOGGER.info("subtract.result=" + _subtract__return);
        }
        {
            LOGGER.info("Invoking divide...");
            int _divide_intA = 30;
            int _divide_intB = 30;
            int _divide__return = port.divide(_divide_intA, _divide_intB);
            LOGGER.info("divide.result=" + _divide__return);
        }
        {
            LOGGER.info("Invoking multiply...");
            int _multiply_intA = 40;
            int _multiply_intB = 40;
            int _multiply__return = port.multiply(_multiply_intA, _multiply_intB);
            LOGGER.info("multiply.result=" + _multiply__return);
        }

        System.exit(0);
    }
}